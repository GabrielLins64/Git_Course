Status de arquivos no GIT:

O arquivo pode estar:
 ___________ ____________ __________ ________
| Untracked | Unmodified | Modified | Staged |
|   (ADD)---+------------+----------+--->    |
|           |   (EDIT)---+---->     |        |
|           |            | (STAGE)--+--->    |
|      <----+--(REMOVE)  |          |        |
|           |      <-----+----------+(COMMIT)|
|___________|____________|__________|________|

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Configurações:

git config --global user.name "Nome do usuário"
git config --global user.email "E-mail do usuário"
git config --global core.editor vim # Pra setar o vim como editor padrão
git config user.name # Pro git informar qual o nome do user
git config --list # Mostra todas as informações de config

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Manipulação de Repositório:

git init # Inicia um respositório na pasta atual
git status # informa o status do repositório atual
	Untracked: O arquivo existe mas ainda não foi incluído no git
git add file.etc # Adiciona ao repositório o arquivo "file.etc"
git add -A # Adiciona todas as alterações feitas.
git commit # Dá o commit nos arquivos já adicionados.
git commit -m "Adicione um comentário aqui" # É uma boa prática informar o que foi feito em cada commit
git commit -am "Comentário" # commita todos os arquivos modificados
git commit -om "Comentário" Arquivo # commita apenas o arquivo "Arquivo"
git checkout file # Desfaz as alterações no arquivo modified file
git reset HEAD file # Tira da fila de stageds o arquivo file
git reset --soft hash # Deixa o arquivo commitado como modified staged, na versão da hash informada (não elimina as versões posteriores).
git reset --mixed hash # Volta o arquivo commitado para modified unstaged, na versão da hash informada (não elimina versões posteriores).
git reset --hard hash # Deixa o arquivo commitado (unmodified) mas volta a versão para a da hash informada (ELIMINA VERSÕES POSTERIORES).

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Informações:

git log # Dá informações de log (commits, branches, etc.)
git log --author="Nome do autor" # Procura os Logs apenas do autor informado
git shortlog # Mostra sumariamente informações básicas de logs
git shortlog -sn # Mostra a qtd de commits de cada autor
git log --graph # Mostra, em forma gráfica, os branches e versões.
git show hash # Mostra os detalhes do commit com a hash (informada no log)
git diff # Mostra as modificações feitas nos arquivos.
git diff --name-online # Mostra apenas o nome dos arquivos modificados.

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Gerando uma chave SSH:

1. Acesse:
	https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh
2. Clique em "Generating a new SSH key"
3. Siga as instruções e gere a chave SSH.
4. Navege em: $cd ~/.ssh/
5. Visualize sua chave pública com: $cat id_rsa.pub
6. Copie a chave (com e-mail e tudo)
7. Adicione ao GitHub em: 
	Settings > SSH and GPG keys > New SSH key
	*É uma boa prática colocar o nome da máquina no title
8. Clique em adicionar SSH.

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Ligando repositório local a um remoto:

1. Crie uma pasta para o repositório e dê:
	$git init
2. Adicione os arquivos com:
	$git add .
3. Dê commit com:
	$git commit -m "Algum comentário"
4. Crie um repositório no GitHub (ou abra um existente) e copie a URL do repositório (com .git no final)
5. Use:
	$git remote add origin URL Do repositório
	*Para não ter que autenticar sempre que der push, use a URL como git@github.com:NomeDoPerfil/NomeDoRepositório.git
6. Verifique a URL remota:
	$git remote -v
7. Para colocar, de fato, os arquivos da pasta no repositório use:
	$git push -u origin master

*Para adicionar um repositório remoto de outro projeto:
$git remote add algumnome URLDoRepo

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Clones e Forks:

> Clone: Copia (baixa) um repositório, com todos seus arquivos, para o repositório git local (da máquina).

1. Vá até o repositório no GitHub e clique no botão verde "Clone or Download"
2. Copie o URL informado.
3. Use o comando:
	$git clone URL NomeDaPastaQueVaiConterOClone
*Não é possível dar pushs em repositórios clonados que não são de sua autoria.

> Fork: Faz uma cópia de um repositório remoto para os seus repositórios, de forma que você possa contribuir no projeto e enviar pull requests ao projeto original.

1. No GitHub, navegue até o repositório que deseja fazer o fork.
2. Clique na opção fork.

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Projetos paralelos (Branches, Pull request, merge e rebase):

> Branch: Ponteiro móvel que leva a um commit. Pelo GitHub: Use um branch para isolar o trabalho de desenvolvimento sem afetar outros branches no repositório. Cada repositório em um branch padrão pode ter vários outros branches. Você pode fazer merge de um branch em outro branch usando uma pull request.

git checkout -b Nome_do_branch # cria um branch no repositório atual
git branch # mostra os branches do repositório e qual está sendo utilizado no momento
git checkout Algum_branch # Começa a utilizar o "Algum_branch"
git branch -d algum_branch # deleta algum_branch localmente
git push origin --delete algum_branch # deleta algum_branch remotamente
git branch -vv # Mostra o track dos branches existentes

> Pull Request:

$git checkout -b new_branch # Cria um novo branch
*Ou mude para um branch existente: $git checkout existing_branch
$git add file # adiciona o arquivo modificado
$git commit -m "Comentário" # faz o commit do arquivo
*Antes de dar um push pode ser uma boa idéia dar um mage no master para garantir manter as alterações já feitas no projeto.
$git push -u origin new_branch # -u é equivalente a --set-upstream

*Após isto, uma solicitação de PULL REQUEST deve ser feita manualmente no repositório remoto do GitHub. Após criar a solicitação de pull request, o master pode aprovar com:

$git checkout master # Caso seja necessário mudar para o branch master
$git merge new_branch # Faz merge com o projeto do new_branch
$git push -u origin master

> Merge: Nós precisamos, de alguma maneira, misturar os commits do branch da nossa tarefa com os commits posteriores que foram feitos no branch master, quando este for “fundido” novamente. O merge basicamente cria um novo commit no branch onde o merge é realizado. Este commit puxa consigo a última referência do branch a partir do qual o merge é realizado. Este commit “especial” é chamado de merge commit. 

Para utilizar:
1. Realize os commits no branch que está sendo utilizado
2. use: $git merge master # para fundir com o branch master
3. pode ser dado, também, pelo branch master:
	$git merge outrobranch # feito pelo master

> Rebase: Como uma alternativa à mesclagem (merge), você pode fazer o rebase do branch feature no branch master usando os comandos a seguir:

$git checkout feature
$git rebase master

Isso move toda o branch feature para começar na ponta do branch master, incorporando efetivamente todas as novas confirmações em master. Mas em vez de usar uma confirmação de merge, o rebase reescreve o histórico do projeto criando confirmações totalmente novas para cada confirmação no branch original.

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
Extras:

> .gitignore: É um arquivo de texto que informa ao Git quais arquivos ou pastas devem ser ignorados, ao fazer pushs e commits, num projeto.

1. Para ignorar, num projeto, todos os arquivos de extensão ".json", faça:
	$vim .gitignore # Crie um arquivo gitignore
2. Escreva no arquivo: *.json
3. Salve o arquivo e pronto, agora o git irá ignorar o que foi especificado.

*No perfil do GitHub, há um repositório com vários .gitignore de projetos comuns, como projetos com java, por exemplo, que ignoram arquivos .class (classes compiladas), arquivos .log e arquivos de pacote como .jar, .zip, .rar, etc.

> Git Stash: Guarda modificações que ainda não tiveram commit num arquivo, para serem posteriormente recuperadas. Serve para trabalhar em outras partes do projeto, fazer pulls, etc. quando alguma modificação ainda não terminada está em progresso, esta modificação pode ser guardada para dar continuidade quando desejar. Comandos:

$git stash # Guarda as modificações atuais em estado de WIP
$git stash apply # Aplica as mudanças que foram armazenadas
$git stash list # Mostra uma lista com os stashs existentes
$git stash clear # Limpa os stashs armazenados

> Alias: Atalhos de comandos

$git config --global alias.s status # cria um alias para chamar o comando "status" com o alias "s".

> Versionamento com tags: Cria versões do projeto no repositório remoto

$git tag -a versão -m "Mensagem" # Adiciona uma versão do projeto. -a é para adicionar anotações, e -m define a mensagem. Exemplo:

$git tag -a 1.0.0 -m "Adicionado README"
$git push origin master --tags # Para adicionar ao repositório remoto (a versão pode ser encontrada em "releases").

~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X ~~~~~~~~~~~~~~~~~ X
